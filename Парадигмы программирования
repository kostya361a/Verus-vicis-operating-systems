#include <ntddk.h>

#define DRIVER_TAG 'tad'

UNICODE_STRING g_DeviceName = RTL_CONSTANT_STRING(L"\\Device\\SampleDriver");
UNICODE_STRING g_SymbolicLinkName = RTL_CONSTANT_STRING(L"\\DosDevices\\SampleDriver");

PDEVICE_OBJECT g_DeviceObject = NULL;

NTSTATUS DriverUnload(PDRIVER_OBJECT driverObject) {
    UNREFERENCED_PARAMETER(driverObject);
    IoDeleteSymbolicLink(&g_SymbolicLinkName);
    if (g_DeviceObject) {
        IoDeleteDevice(g_DeviceObject);
    }
    DbgPrint("Sample driver unloaded\n");
    return STATUS_SUCCESS;
}

NTSTATUS DriverCreateClose(PDEVICE_OBJECT deviceObject, PIRP irp) {
    UNREFERENCED_PARAMETER(deviceObject);
    irp->IoStatus.Status = STATUS_SUCCESS;
    irp->IoStatus.Information = 0;
    IoCompleteRequest(irp, IO_NO_INCREMENT);
    return STATUS_SUCCESS;
}

NTSTATUS DriverEntry(PDRIVER_OBJECT driverObject, PUNICODE_STRING registryPath) {
    UNREFERENCED_PARAMETER(registryPath);
    NTSTATUS status = STATUS_SUCCESS;
    driverObject->DriverUnload = DriverUnload;
    driverObject->MajorFunction[IRP_MJ_CREATE] = DriverCreateClose;
    driverObject->MajorFunction[IRP_MJ_CLOSE] = DriverCreateClose;

    status = IoCreateDevice(driverObject, 0, &g_DeviceName, FILE_DEVICE_UNKNOWN, FILE_DEVICE_SECURE_OPEN, FALSE, &g_DeviceObject);
    if (!NT_SUCCESS(status)) {
        DbgPrint("Failed to create device object\n");
        return status;
    }
    status = IoCreateSymbolicLink(&g_SymbolicLinkName, &g_DeviceName);
    if (!NT_SUCCESS(status)) {
        DbgPrint("Failed to create symbolic link\n");
        IoDeleteDevice(g_DeviceObject);
        return status;
    }
    DbgPrint("Sample driver loaded\n");
    return status;
}
